// ProtectYourBalls

//Audio
import ddf.minim.*;
Minim minim;
AudioPlayer player;
AudioPlayer player2;
AudioPlayer player3;
AudioPlayer player4;
float aud1, aud2, aud3;
//-----

//Images
PImage dirs;
PImage ball;
PImage button1;
PImage button2;
PImage button3;
PImage button4;
//-----

ArrayList<BadBalls> balls;
Ball yours1;
Ball yours2;
String frame;
float mode, holding, sze, speed, rate, click;
int time;

void setup() {
  size(600, 600); //MUST BE SQUARE FOR PROPER DIFFICULTY
  frameRate(60); //Don't change this?
  //Audio
  minim = new Minim(this);
  player = minim.loadFile("LoadingScreen.wav");
  player2 = minim.loadFile("Gameplay.wav");
  player3 = minim.loadFile("WinningScreen.wav");
  player4 = minim.loadFile("LosingScreen.wav");
  aud1=0;
  aud2=0;
  aud3=0;
  //-----

  //Images
  dirs = loadImage("directions.PNG");
  ball = loadImage("ball.png");
  button1 = loadImage("button1.png");
  button2 = loadImage("button2.png");
  button3 = loadImage("button3.png");
  //button4 = loadImage("button4.png");
  //-----

  //Other
  balls = new ArrayList<BadBalls>();
  yours1 = new Ball(width/2-width/10, height/2, 50);
  yours2 = new Ball(width/2+width/10, height/2, 50);

  frame="dirs";
  mode=0;
  holding=0;
  sze=0;
  speed=0;
  rate=60;
  time=0;

  rectMode(CENTER);
  imageMode(CENTER);
  textAlign(CENTER);
  textSize(width/35);
  smooth();
  stroke(1);
}

void draw() {
  if (frame=="dirs") {
    dirs();
  }
  if (frame=="menu") {
    menu();
  } 
  if (frame=="play") {
    play();
  }
  if (frame=="win") {
    win();
  }
  if (frame=="lose") {
    lose();
  }
}

void mouseReleased() {
  if (frame=="dirs"){
    frame="menu";
  }
  if (frame=="menu") {
    if (abs(mouseX-width/2)<width/8 && abs(mouseY-height/4)<height/20) {
      mode=1;
      setPlay();
    }
    if (abs(mouseX-width/2)<width/8 && abs(mouseY-9*height/20)<height/20) {
      mode=2;
      setPlay();
    }
    if (abs(mouseX-width/2)<width/8 && abs(mouseY-13*height/20)<height/20) {
      mode=3;
      setPlay();
    }
  }
  if (frame=="play") {
    holding=0;
  }
  if (frame=="win"||frame=="lose") {
    if (abs(mouseX-width/2)<width/8 && abs(mouseY-height/2)<height/16) {
      playAgain();
    }
  }
}

void setPlay() {
  frame="play";
  player.pause();
  player2.rewind();
  player2.play();
  frameCount=0;
}


// Play

void play() {
  if (mode==1 && frameCount==1) {
    sze=width/20;
    speed=1.5;
    time=30;
    yours1.reset(width/2-width/10, height/2, sze);
    yours2.reset(width/2+width/10, height/2, sze);
  }
  if (mode==2 && frameCount==1) {
    sze=width/15;
    speed=2;
    time=45;
    yours1.reset(width/2-width/10, height/2, sze);
    yours2.reset(width/2+width/10, height/2, sze);
  }
  if (mode==3 && frameCount==1) {
    sze=width/10;
    speed=2.5;
    time=60;
    yours1.reset(width/2-width/10, height/2, sze);
    yours2.reset(width/2+width/10, height/2, sze);
  }

  if (frameCount>time*rate) { //Win Condition
    player2.pause();
    player3.play();
    aud2=0;
    frame="win";
  }

  background(30,144,255);
  noFill();
  rect(width/2, height/2, width-2*sze, height-2*sze);

  //YourBalls
  fill(0, 255, 0, 100); //Good color
  yours1.display();
  yours2.display();
  fill(255, 0, 0, 100); //Bad color
  if (holding==1) {
    if (dist(yours1.getX()+(mouseX-pmouseX), yours1.getY()+(mouseY-pmouseY), yours2.getX(), yours2.getY())>sze) {
      if (mouseX>sze && mouseX<width-sze && mouseY>sze && mouseY<height-sze) {
        yours1.setXY(mouseX-pmouseX, mouseY-pmouseY);
      } else {
        holding=0;
      }
    } else {
      holding=0;
    }
  }
  if (holding==2) {
    if (dist(yours2.getX()+(mouseX-pmouseX), yours2.getY()+(mouseY-pmouseY), yours1.getX(), yours1.getY())>sze) {
      if (mouseX>sze && mouseX<width-sze && mouseY>sze && mouseY<height-sze) {
        yours2.setXY(mouseX-pmouseX, mouseY-pmouseY);
      } else {
        holding=0;
      }
    } else {
      holding=0;
    }
  }
  //-----

  //BadBalls
  if ((frameCount*speed)%90==0) {
    addBall(int(random(2)), int(random(2)));
  }
  for (int i=balls.size ()-1;i>=0; i--) {
    BadBalls bball = balls.get(i);
    bball.update();
    bball.display();
    checkHit(bball.getX(), bball.getY(), bball.getDiam());
    if (bball.getX()<0 || bball.getX()>width || bball.getY()<0 || bball.getY()>height) {
      balls.remove(i);
    }
  }
  //-----
  
  //Timer
  fill(255, 255, 0);
  text("Time left: "+(time-int(frameCount/rate)), width/2, width/23);
  //-----
  //System.out.println(frameRate+" - "+rate);
}

void mousePressed() {
  if (frame=="play") {
    if (holding==0) {
      if (dist(yours1.getX(), yours1.getY(), mouseX, mouseY)<sze/2) {
        holding=1;
      } else 
        if (dist(yours2.getX(), yours2.getY(), mouseX, mouseY)<sze/2) {
        holding=2;
      }
    }
  }
}

void addBall(int r1, int r2) {
  if (r1==0) {
    if (r2==0) {
      balls.add(new BadBalls(0, random(height), random(width/20, width/(25-5*mode)), random(width/600, width*speed/600), 0));
    } else {
      balls.add(new BadBalls(width, random(height), random(width/20, width/(25-5*mode)), -1*(random(width/600, width*speed/600)), 0));
    }
  } else {
    if (r2==0) {
      balls.add(new BadBalls(random(width), 0, random(width/20, width/(25-5*mode)), 0, random(width/600, width*speed/600)));
    } else {
      balls.add(new BadBalls(random(width), height, random(width/20, width/(25-5*mode)), 0, -1*(random(width/600, width*speed/600))));
    }
  }
}

void checkHit(float hitterX, float hitterY, float hitterD) {
  if (dist(hitterX, hitterY, yours1.getX(), yours1.getY())<((hitterD/2)+(sze/2))||dist(hitterX, hitterY, yours2.getX(), yours2.getY())<((hitterD/2)+(sze/2))) {
    player2.pause();
    player4.play();
    aud3=0;
    frame="lose";
  }
}

// Win

void win() {
  if (aud2%(30*frameRate)==0) {
    player3.rewind();
    player3.play();
  }
  aud2++;

  background(0, 255, 0);
  button4();
}

void button4() {
  fill(255);
  rect(width/2, height/2, 2*width/8, height/8);
  fill(0);
  text("Play again?",width/2,height/2);
  //image(button4,width/2,height/2,2*width/8,height/8);
}

void playAgain() {
  for (int i=balls.size ()-1; i>=0; i--) {
    balls.remove(i);
  }
  player3.pause();
  player4.pause();
  aud1=0;
  frame="menu";
}

// Menu

void menu() {
  player.play();
  if (aud1%(29*frameRate)==0) {
    player.rewind();
    player.play();
  }
  aud1++;
  if (aud1==1740) {
    aud1=0;
  }

  background(30,144,255);
  button1();
  button2();
  button3();
}

void button1() {
  fill(255);
  //rect(width/2, height/4, width/4, height/10);
  image(button1,width/2,height/4,2*width/8,height/10);
}

void button2() {
  fill(255);
  //rect(width/2, 9*height/20, 2*width/8, height/10);
  image(button2,width/2,9*height/20,2*width/8,height/10);
}

void button3() {
  fill(255);
  //rect(width/2, 13*height/20, 2*width/8, height/10);
  image(button3,width/2,13*height/20,2*width/8,height/10);
}

// Lose

void lose() {
  if (aud3%(43*frameRate)==0) {
    player4.rewind();
    player4.play();
  }
  aud3++;

  background(255, 0, 0);
  button4();
}


// dirs

void dirs(){
  background(30,144,255);
  image(dirs, width/2,height/2,width,height-height/2);
}

// Ball

class Ball {
  float x, y, sze;
  Ball(float tempX, float tempY, float tempSize) {
    x=tempX;
    y=tempY;
    sze=tempSize;
  }
  void display() {
    image(ball,x,y,sze,sze);
    ellipse(x, y, sze, sze);
  }
  void reset(float tX, float tY, float tSize) {
    x=tX;
    y=tY;
    sze=tSize;
  }
  void setXY(float xChange, float yChange) {
    x+=xChange;
    y+=yChange;
  }
  float getX() {
    return x;
  }
  float getY() {
    return y;
  }
  float getDiam() {
    return sze;
  }
}

//BadBalls

class BadBalls extends Ball {
  float xVel, yVel;
  BadBalls(float x, float y, float sze, float txVel, float tyVel) {
    super(x, y, sze);
    xVel=txVel;
    yVel=tyVel;
  }
  void update() {
    x+=xVel;
    y+=yVel;
  }
}
